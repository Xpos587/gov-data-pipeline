"""
This type stub file was generated by pyright.
"""

from contextlib import contextmanager
from typing import List, Literal, Optional, Union

"""
This type stub file was generated by pyright.
"""
tesseract_cmd = ...
numpy_installed = ...
pandas_installed = ...
LOGGER = ...
DEFAULT_ENCODING = ...
LANG_PATTERN = ...
RGB_MODE = ...
SUPPORTED_FORMATS = ...
OSD_KEYS = ...
EXTENTION_TO_CONFIG = ...
TESSERACT_MIN_VERSION = ...
TESSERACT_ALTO_VERSION = ...

class Output:
    BYTES = ...
    DATAFRAME = ...
    DICT = ...
    STRING = ...

class PandasNotSupported(EnvironmentError):
    def __init__(self) -> None: ...

class TesseractError(RuntimeError):
    def __init__(self, status, message) -> None: ...

class TesseractNotFoundError(EnvironmentError):
    def __init__(self) -> None: ...

class TSVNotSupported(EnvironmentError):
    def __init__(self) -> None: ...

class ALTONotSupported(EnvironmentError):
    def __init__(self) -> None: ...

def kill(process, code): ...
@contextmanager
def timeout_manager(proc, seconds=...): ...
def run_once(func): ...
def get_errors(error_string): ...
def cleanup(temp_name):
    """Tries to remove temp files by filename wildcard path."""
    ...

def prepare(image): ...
@contextmanager
def save(image): ...
def subprocess_args(include_stdout=...): ...
def run_tesseract(
    input_filename,
    output_filename_base,
    extension,
    lang,
    config=...,
    nice=...,
    timeout=...,
): ...
def run_and_get_multiple_output(
    image,
    extensions: List[str],
    lang: Optional[str] = ...,
    nice: int = ...,
    timeout: int = ...,
    return_bytes: bool = ...,
): ...
def run_and_get_output(
    image, extension=..., lang=..., config=..., nice=..., timeout=..., return_bytes=...
): ...
def file_to_dict(tsv, cell_delimiter, str_col_idx): ...
def is_valid(val, _type): ...
def osd_to_dict(osd): ...
@run_once
def get_languages(config=...): ...
@run_once
def get_tesseract_version():
    """
    Returns Version object of the Tesseract version
    """
    ...

def image_to_string(
    image: Union[str, bytes],
    lang: Optional[str] = None,
    config: Optional[str] = None,
    nice: int = 0,
    output_type: Literal["string", "bytes", "dict"] = "string",
    timeout: Optional[int] = None,
) -> Optional[str]: ...
def image_to_pdf_or_hocr(
    image, lang=..., config=..., nice=..., extension=..., timeout=...
):
    """
    Returns the result of a Tesseract OCR run on the provided image to pdf/hocr
    """
    ...

def image_to_alto_xml(image, lang=..., config=..., nice=..., timeout=...):
    """
    Returns the result of a Tesseract OCR run on the provided image to ALTO XML
    """
    ...

def image_to_boxes(image, lang=..., config=..., nice=..., output_type=..., timeout=...):
    """
    Returns string containing recognized characters and their box boundaries
    """
    ...

def get_pandas_output(args, config=...): ...
def image_to_data(
    image,
    lang=...,
    config=...,
    nice=...,
    output_type=...,
    timeout=...,
    pandas_config=...,
):
    """
    Returns string containing box boundaries, confidences,
    and other information. Requires Tesseract 3.05+
    """
    ...

def image_to_osd(image, lang=..., config=..., nice=..., output_type=..., timeout=...):
    """
    Returns string containing the orientation and script detection (OSD)
    """
    ...

def main(): ...

if __name__ == "__main__": ...
